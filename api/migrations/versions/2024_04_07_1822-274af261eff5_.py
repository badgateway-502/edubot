"""empty message

Revision ID: 274af261eff5
Revises:
Create Date: 2024-04-07 18:22:18.213065

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "274af261eff5"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "student",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("firstname", sa.String(), nullable=False),
        sa.Column("lastname", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "teacher",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("firstname", sa.String(), nullable=False),
        sa.Column("lastname", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "subject",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("teacher_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["teacher_id"],
            ["teacher.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "lecture",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("subject_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("text_description", sa.String(), nullable=True),
        sa.Column("description_file_id", sa.String(), nullable=True),
        sa.Column("video_file_id", sa.String(), nullable=True),
        sa.Column("created_at", sa.Date(), nullable=False),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("number", "subject_id"),
        sa.UniqueConstraint("title", "subject_id"),
    )
    op.create_table(
        "lecture_lab",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("lecture_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("text_description", sa.String(), nullable=True),
        sa.Column("description_file_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["lecture_id"],
            ["lecture.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("lecture_id"),
    )
    op.create_table(
        "lecture_test",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("lecture_id", sa.Integer(), nullable=False),
        sa.Column("result_to_pass", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["lecture_id"],
            ["lecture.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("lecture_id"),
    )
    op.create_table(
        "students_progress",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("student_id", sa.Integer(), nullable=False),
        sa.Column("subject_id", sa.Integer(), nullable=False),
        sa.Column("current_lecture", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["current_lecture"],
            ["lecture.id"],
        ),
        sa.ForeignKeyConstraint(
            ["student_id"],
            ["student.id"],
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("student_id", "subject_id"),
    )
    op.create_table(
        "test_question",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("test_id", sa.Integer(), nullable=False),
        sa.Column("weight", sa.Integer(), nullable=False),
        sa.Column("question", sa.String(), nullable=False),
        sa.Column("right_answer", sa.String(), nullable=True),
        sa.Column(
            "type",
            sa.Enum(
                "scalar",
                "moder",
                "moderfile",
                "variant",
                name="campaignstatus",
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["test_id"],
            ["lecture_test.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "answer_variant",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("question_id", sa.Integer(), nullable=False),
        sa.Column("text", sa.String(), nullable=False),
        sa.Column("is_right", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["question_id"],
            ["test_question.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("answer_variant")
    op.drop_table("test_question")
    op.drop_table("students_progress")
    op.drop_table("lecture_test")
    op.drop_table("lecture_lab")
    op.drop_table("lecture")
    op.drop_table("subject")
    op.drop_table("teacher")
    op.drop_table("student")
    # ### end Alembic commands ###
