from typing import List

from aiogram import types
from aiogram.types import ReplyKeyboardMarkup

from bot.entity_types import SubjectType

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ–Ω—é –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
def keyboard_for_menu() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üçï"),
         types.KeyboardButton(text="–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ü•ê")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –º–µ–Ω—é - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
def keyboard_go_to_menu() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–í –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
def keyboard_subjects(subjects: List[SubjectType]) -> ReplyKeyboardMarkup:
    keyboard = [[]]
    for subject in subjects:
        if len(keyboard[-1]) < 2:
            keyboard[-1].append(types.KeyboardButton(
                text=f"{subject['name']}",
            ))
        else:
            keyboard.append([types.KeyboardButton(
                text=f"{subject['name']}",
            )])
    keyboard.append([types.KeyboardButton(text="–í –º–µ–Ω—é", callback_data="–í –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=keyboard)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
def keyboard_for_subject() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–¢–µ–∫—É—â–∞—è –ª–µ–∫—Ü–∏—è"),
         types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ–∫—Ü–∏–π")],
        [types.KeyboardButton(text="–í –º–µ–Ω—é"),
         types.KeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–µ–∫—Ü–∏–∏
def keyboard_for_lecture() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–í –º–µ–Ω—é"),
         types.KeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤"),
         types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ–∫—Ü–∏–π"),
         types.KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ª–µ–∫—Ü–∏–π
def keyboard_for_all_lectures() -> ReplyKeyboardMarkup:
    kb = [
        [types.KeyboardButton(text="–í –º–µ–Ω—é"),
         types.KeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤"),
         types.KeyboardButton(text="–¢–µ–∫—É—â–∞—è –ª–µ–∫—Ü–∏—è")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard


# –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–≤—ã–π, —Ç–æ –æ—Ç–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ "–≤ –º–µ–Ω—é" –∏ ">"
# –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–π, —Ç–æ –æ—Ç–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ "<" –∏ "–≤ –º–µ–Ω—é"
# –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π (—Ç–æ–µ—Å—Ç—å –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π), —Ç–æ –æ—Ç–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É "–≤ –º–µ–Ω—é"
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —Ç–µ—Å—Ç–µ
def keyboard_quiz(first: bool = False, last: bool = False, first_and_last: bool = False) -> ReplyKeyboardMarkup:
    if first:
        kb = [
            [
                types.KeyboardButton(text="–í –º–µ–Ω—é"),
                types.KeyboardButton(text=">"),
            ],
        ]
    elif last:
        kb = [
            [
                types.KeyboardButton(text="<"),
                types.KeyboardButton(text="–í –º–µ–Ω—é"),
            ],
        ]
    elif first_and_last:
        kb = [
            [
                types.KeyboardButton(text="–í –º–µ–Ω—é"),
            ],
        ]
    else:
        kb = [
            [
                types.KeyboardButton(text="<"),
                types.KeyboardButton(text="–í –º–µ–Ω—é"),
                types.KeyboardButton(text=">")
            ],
        ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard

# –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
def keyboard_answer_variants(variants: List[str]) -> types.InlineKeyboardMarkup:
    keyboard = [[]]
    for variant in variants:
        if len(keyboard[-1]) < 3:
            keyboard[-1].append(types.InlineKeyboardButton(
                text=f"{variant}",
            ))
        else:
            keyboard.append([types.InlineKeyboardButton(
                text=f"{variant}",
            )])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    return keyboard
