from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import Text, Bold

from bot import future_api
from bot.keyboards import keyboard_for_subject, keyboard_subjects
from bot.states import AFKState, SubjectState

subjects_router = Router()


@subjects_router.message(AFKState.logged, F.text == "–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ü•ê")
@subjects_router.message(SubjectState.choosing_subject, F.text == '–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
@subjects_router.message(SubjectState.chosen_subject, F.text == '–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
@subjects_router.message(SubjectState.choosing_lecture, F.text == '–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
@subjects_router.message(SubjectState.lecture_opened, F.text == '–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
async def my_subjects_button(message: types.Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    subjects = future_api.get_info_about_subjects_db()
    keyboard = keyboard_subjects(subjects)  # –∏–∑ keyboard_subjects –ø–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    await message.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: ', reply_markup=keyboard)
    await state.set_state(SubjectState.choosing_subject)
    state_data = await state.get_data()  # —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ –µ—Å–ª–∏ –æ–Ω –∫–æ–≥–¥–∞—Ç–æ –±—ã–ª –≤—ã–±—Ä–∞–Ω
    if 'subject_id' in state_data.keys():
        del state_data['subject_id']
        await state.set_data(state_data)


@subjects_router.message(SubjectState.choosing_subject, F.text.in_(future_api.get_subjects_titles().keys()))
async def my_subjects_button(message: types.Message, state: FSMContext):
    try:
        subject_id = future_api.get_subjects_titles()[message.text]  # –ø–æ–ª—É—á–∞–µ–º id –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        subject = future_api.get_info_current_subject(message.from_user.id,
                                                      subject_id)  # –ø–æ–ª—É—á–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        content = Text(
            '–ü—Ä–µ–¥–º–µ—Ç ',
            Bold(subject['name']),
            '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ',
            Bold(subject['teacher']['firstname'] + subject['teacher']['lastname']),
            # '\n–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å: ',
            # Bold(subject[3]),
            # '\n–¢–µ–∫—É—â–∞—è –ª–µ–∫—Ü–∏—è: ',
            # Bold(subject[4]),
            # TODO
        )
        await message.answer(**content.as_kwargs(), reply_markup=keyboard_for_subject())
        await state.set_state(SubjectState.chosen_subject)
        await state.set_data({'subject_id': subject_id})
    except ValueError as e:
        await message.answer(f'{e}')
