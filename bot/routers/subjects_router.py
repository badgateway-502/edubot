from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import Text, Bold

from bot import future_api
from bot.keyboards import keyboard_go_to_menu, keyboard_for_subject
from bot.states import AFKState, SubjectState

subjects_router = Router()


async def get_info_about_subject_db(user_id: int) -> str:
    subjects = await future_api.get_info_about_subject_db(user_id)
    text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: '
    for subject in subjects:
        text += f'\n {subject[0]} {subject[1]}'
    text += '\n\n —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä'
    return text


@subjects_router.message(SubjectState.chosen_subject, F.text == '–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
@subjects_router.message(SubjectState.lecture_opened, F.text == '–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
@subjects_router.message(SubjectState.choosing_lecture, F.text == '–ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
@subjects_router.message(AFKState.logged, F.text == "–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ü•ê")
async def my_subjects_button(message: types.Message, state: FSMContext):
    text = await get_info_about_subject_db(message.from_user.id)
    await message.reply(text, reply_markup=keyboard_go_to_menu())
    await state.set_state(SubjectState.choosing_subject)
    state_data = await state.get_data()
    if 'subject_id' in state_data.keys():
        del state_data['subject_id']
        await state.set_data(state_data)


@subjects_router.message(SubjectState.choosing_subject, F.text.isdigit())
async def my_subjects_button(message: types.Message, state: FSMContext):
    try:
        subject = await future_api.get_info_about_subject(message.from_user.id, int(message.text))
        content = Text(
            '–ü—Ä–µ–¥–º–µ—Ç ',
            Bold(subject[1]),
            '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ',
            Bold(subject[2]),
            '\n–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å: ',
            Bold(subject[3]),
            '\n–¢–µ–∫—É—â–∞—è –ª–µ–∫—Ü–∏—è: ',
            Bold(subject[4]),
        )
        await message.answer(**content.as_kwargs(), reply_markup=keyboard_for_subject())
        await state.set_state(SubjectState.chosen_subject)
        await state.set_data({'subject_id': subject[0]})
    except ValueError as e:
        await message.answer(f'{e}')


@subjects_router.message(SubjectState.choosing_subject)
async def my_subjects_button(message: types.Message):
    await message.reply('–í –Ω–æ–º–µ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
